package Medium;
/*
There are n cities. Some of them are connected, while some are not.
If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.
A province is a group of directly or indirectly connected cities and no other cities outside of the group.
You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected,
and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

Example 1:                                                  Example 2:
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]              Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 2                                                   Output: 3

Constraints:
1 <= n <= 200 || n == isConnected.length || n == isConnected[i].length
isConnected[i][j] is 1 or 0. || isConnected[i][i] == 1 || isConnected[i][j] == isConnected[j][i]

*/

public class NumberOfProvinces {

    public int findCircleNum(int[][] isConnected) {
        int vertex = isConnected.length;
        int[] visited = new int[vertex];
        int count = 0;
        for (int i = 1; i < vertex; i++) {
            if(visited[i] == 0){
                count++;
                dfs(i,isConnected,visited);
            }
        }
        return count;
    }

    private void dfs(int node, int[][] isConnected, int[] visited) {
        visited[node] = 1;
        for (int i = 0; i < isConnected[node].length; i++) {
            if(isConnected[node][i] == 1){
                if(visited[i] == 0){
                    dfs(i,isConnected,visited);
                }
            }
        }
    }


}
