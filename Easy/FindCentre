package Easy;


/*
There is an undirected star graph consisting of n nodes labeled from 1 to n.
A star graph is a graph where there is one center node and exactly n - 1 edges that connect the center node with every other node.

You are given a 2D integer array edges where each edges[i] = [ui, vi] indicates that there is an edge between the nodes ui and vi.
Return the center of the given star graph.

Example 1:                                                                  Example 2:
Input: edges = [[1,2],[2,3],[4,2]]                                          Input: edges = [[1,2],[5,1],[1,3],[1,4]]
Output: 2                                                                   Output: 1
Explanation: As shown in the figure above,
node 2 is connected to every other node, so 2 is the center.


Constraints: 3 <= n <= 10^5 || edges.length == n - 1 || edges[i].length == 2 || 1 <= ui, vi <= n || ui != vi
The given edges represent a valid star graph.
 */
public class FindCenter {

    public int findCenterOptimized(int[][] edges) {
        int a = edges[0][0];
        int b = edges[0][1];
        return edges[1][0] == a || edges[1][1] == a ? a : b;
    }
    public int findCenter(int[][] edges) {
        int node = edges.length+2;
        int[] nodes = new int[node];
        for (int i = 0; i < edges.length; i++) {
            nodes[edges[i][0]]++;
            nodes[edges[i][1]]++;
        }
        for (int i = 1; i <= node; i++) {
            if(nodes[i] == edges.length){
                return i;
            }
        }
        return 1;
    }
}
